/**
 * Miscellaneous unrelated variables and utils.
 *
 * The file should not contain normal CSS rules - it is designed to be included via @import into other LESS files
 * as a library. Place here variable declarations and mixins only.
 * Be sure to put parenthesis after each mixin name, even if no parameters are required - this will suppress mixin output
 * (for details see http://lesscss.org/features/#mixins-feature-not-outputting-the-mixin)
 * Most parametric mixins can accept unitless parameters in which case px is used as a default unit.
 */

@import (reference) "ui";

/**
 * Mixins
 */


.flexbox(@value: flex)when (@value = flex) {
    display:-webkit-box;
}
.flexbox(@value: flex)when (@value = inline-flex) {
    display:-webkit-inline-box;
}
.flexbox(@value: flex) {
    display:~"-webkit-@{value}";
    display:~"-moz-@{value}";
    display:~"-ms-@{value}box";
    display:@value;
}


/* Triangles in CSS */
.arrow(@dir; @width; @height; @color) {
    width:0;
    height:0;
    border-style:solid;
    }
.arrow(n; @width; @height; @color) {
    border-width:@height + 0px @width / 2 + 0px;
    border-color:transparent transparent @color;
    }
.arrow(s; @width; @height; @color) {
    border-width:@height + 0px @width / 2 + 0px;
    border-color:@color transparent transparent;
    }
.arrow(w; @width; @height; @color) {
    border-width:@height / 2 + 0px @width + 0px;
    border-color:transparent @color transparent transparent;
    }
.arrow(e; @width; @height; @color) {
    border-width:@height / 2 + 0px @width + 0px;
    border-color:transparent transparent transparent @color;
    }
.arrow(nw; @width; @height; @color) {
    border-width:@height / 2 + 0px @width / 2 + 0px;
    border-color:@color transparent transparent @color;
    }
.arrow(sw; @width; @height; @color) {
    border-width:@height / 2 + 0px @width / 2 + 0px;
    border-color:transparent transparent @color @color;
    }
.arrow(se; @width; @height; @color) {
    border-width:@height / 2 + 0px @width / 2 + 0px;
    border-color:transparent @color @color transparent;
    }
.arrow(ne; @width; @height; @color) {
    border-width:@height / 2 + 0px @width / 2 + 0px;
    border-color:@color @color transparent transparent;
    }

.arrow(n; @width; @height) {
    border-width:@height + 0px @width / 2 + 0px;
    border-top-color:transparent;
    border-right-color:transparent;
    border-left-color:transparent;
    }
.arrow(s; @width; @height) {
    border-width:@height + 0px @width / 2 + 0px;
    border-right-color:transparent;
    border-bottom-color:transparent;
    border-left-color:transparent;
    }
.arrow(w; @width; @height) {
    border-width:@height / 2 + 0px @width + 0px;
    border-top-color:transparent;
    border-bottom-color:transparent;
    border-left-color:transparent;
    }
.arrow(e; @width; @height) {
    border-width:@height / 2 + 0px @width + 0px;
    border-top-color:transparent;
    border-right-color:transparent;
    border-bottom-color:transparent;
    }
.arrow(nw; @width; @height) {
    border-width:@height / 2 + 0px @width / 2 + 0px;
    border-right-color:transparent;
    border-bottom-color:transparent;
    }
.arrow(sw; @width; @height) {
    border-width:@height / 2 + 0px @width / 2 + 0px;
    border-top-color:transparent;
    border-right-color:transparent;
    }
.arrow(se; @width; @height) {
    border-width:@height / 2 + 0px @width / 2 + 0px;
    border-top-color:transparent;
    border-left-color:transparent;
    }
.arrow(ne; @width; @height) {
    border-width:@height / 2 + 0px @width / 2 + 0px;
    border-bottom-color:transparent;
    border-left-color:transparent;
    }